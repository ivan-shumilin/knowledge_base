Ссылки .
  Урок hexlet .
  . https://ru.hexlet.io/courses/devops-local-setup/lessons/continuous-integration/theory_unit
  Урок по CI и GitHub Actions .
  . https://ru.hexlet.io/courses/devops-local-setup/lessons/continuous-integration/theory_unit 
  Документация по GitHub Actions .
  . https://help.github.com/en/actions 
  Сборка и тестирование проекта на Python .
  . https://docs.github.com/en/actions/guides/building-and-testing-python 
  Непрерывная интеграция .
  . https://en.wikipedia.org/wiki/Continuous_integration
  Экстремальное программирование .
  . https://www.youtube.com/watch?v=hpatJjeYCk0
Github Actions .
. Continuous Integration – практика постоянной отправки изменений, сделанных разработчиками,
  в рабочую копию (в github по умолчанию это main) и автоматизированной сборки проекта для
  скорейшего выявления интеграционных проблем. Делается это, конечно, не хаотично в
  любой момент времени. Обычно интеграция выполняется на коммиты в репозиторий.
  Для этого используется софт, обычно установленный на специальном сервере, либо
  готовый сервис. Один из таких сервисов встроен прямо в Github и называется
  Github Actions. Он загружает код, собирает его и запускает различные проверки.
  Что и как запускать – определяется программистом. В первую очередь это тесты и линтер.
  
  Для удобства, Github Actions даёт "бейджик" — картинку, которая вставляется в файл
  проекта README.md. Она показывает текущий статус проекта
  (успешна последняя сборка или нет), и по клику на неё можно попасть на страницу
  с последними сборками
  
  В первом проекте мы не пишем тестов к коду, но зато у нас есть линтер, что тоже
  можно считать тестами в некотором роде. Поэтому мы подключим к Github Actions
  именно линтер. Дальше вас ожидает магия. Каждый раз, когда вы будете отправлять коммит,
  Github автоматически отправит его в Github Actions и пришлет вам письмо-отчет
  о результатах проверки.


  
